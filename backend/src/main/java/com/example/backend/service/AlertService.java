package com.example.backend.service;

import com.example.backend.model.Alert;
import com.example.backend.model.AlertType;
import com.example.backend.model.Cluster;
import com.example.backend.model.SeverityLevel;
import com.example.backend.repository.AlertRepository;
import com.example.backend.repository.AlertTypeRepository;
import com.example.backend.repository.ClusterRepository;
import com.example.backend.repository.SeverityLevelRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class AlertService {

    private final AlertRepository alertRepository;
    private final AlertTypeRepository alertTypeRepository;
    private final ClusterRepository clusterRepository;
    private final SeverityLevelRepository severityLevelRepository;

    @Transactional
    public void processLogFile(MultipartFile file) throws IOException {
    List<String> lines = new BufferedReader(new InputStreamReader(file.getInputStream())).lines().toList();
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    String fileName = file.getOriginalFilename();

    for (String line : lines) {
        try {
            String[] parts = line.split(" ", 3);
            if (parts.length < 3) continue;

            String timestampStr = parts[0] + " " + parts[1];
            LocalDateTime timestamp = LocalDateTime.parse(timestampStr, formatter);

            String level = parts[2].split(" ")[0].toUpperCase();
            String message = parts[2].substring(level.length()).trim();

            // Extract details
            String alertName = message.substring(message.indexOf("[") + 1, message.indexOf("]")).trim();
            String code = message.substring(message.indexOf("]") + 1, message.indexOf("-")).trim();
            String clusterName = message.substring(message.indexOf("Cluster:") + 8).trim();

            // üîç Check AlertType by code (not just name) to prevent duplicate entry
            AlertType alertType = alertTypeRepository.findByCode(code)
                    .orElseGet(() -> {
                        AlertType newType = AlertType.builder()
                                .name(alertName)
                                .code(code)
                                .message(message)
                                .category("AutoGenerated")
                                .build();
                        System.out.printf("Created alert type from file: %s | Code: %s%n", fileName, code);
                        return alertTypeRepository.save(newType);
                    });

            // üëç Log skipped creation if already exists
            if (alertType.getAlertTypeId() != null && alertTypeRepository.findByCode(code).isPresent()) {
                System.out.printf("Skipped existing alert type from file: %s | Code: %s%n", fileName, code);
            }

            // üîÅ Severity
            SeverityLevel severity = severityLevelRepository.findByLabel(level)
                    .orElseGet(() -> {
                        SeverityLevel newSeverity = SeverityLevel.builder()
                                .label(level)
                                .level(1) // optionally make dynamic
                                .build();
                        return severityLevelRepository.save(newSeverity);
                    });

            // üîÅ Cluster
            Cluster cluster = clusterRepository.findByName(clusterName)
                    .orElseGet(() -> {
                        Cluster newCluster = Cluster.builder()
                                .name(clusterName)
                                .location("Unknown")
                                .build();
                        return clusterRepository.save(newCluster);
                    });

            // üìå Save Alert
            Alert alert = Alert.builder()
                    .alertType(alertType)
                    .severity(severity)
                    .cluster(cluster)
                    .startTime(timestamp)
                    .acknowledged(false)
                    .build();

            alertRepository.save(alert);

            } catch (Exception e) {
                System.err.println("‚ùå Failed to process line: " + line);
                e.printStackTrace();
            }
        }
    }
}
